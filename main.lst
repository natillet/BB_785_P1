   1              		.cpu cortex-a8
   2              		.eabi_attribute 27, 3
   3              		.fpu neon
   4              		.eabi_attribute 23, 1
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 2
   8              		.eabi_attribute 30, 2
   9              		.eabi_attribute 18, 4
  10              		.file	"main.c"
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.align	2
  21              		.p2align 4,,15
  22              		.global	diff
  24              	diff:
  25              	.LFB1888:
  26              		.file 1 "main.c"
   1:main.c        **** #include <math.h>
   2:main.c        **** #include <stdio.h>
   3:main.c        **** #include <stdlib.h>
   4:main.c        **** #include <time.h>
   5:main.c        **** #include <arm_neon.h>
   6:main.c        **** 
   7:main.c        **** #define N 1000
   8:main.c        **** #define STEPS 16
   9:main.c        **** 
  10:main.c        **** #define ASM
  11:main.c        **** #undef INTRINSICS
  12:main.c        **** 
  13:main.c        **** extern void enable_runfast();
  14:main.c        **** 
  15:main.c        **** float m[N], x[N], y[N], z[N], vx[N], vy[N], vz[N], xnew[N], ynew[N], znew[N];
  16:main.c        **** 
  17:main.c        **** void  diff(struct timespec * difference, struct timespec start, struct timespec end)
  18:main.c        **** {
  27              		.loc 1 18 0
  28              		.cfi_startproc
  29              		@ args = 12, pretend = 8, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 08D04DE2 		sub	sp, sp, #8
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36 0004 04402DE5 		str	r4, [sp, #-4]!
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 12
  39 0008 0CD04DE2 		sub	sp, sp, #12
  40              	.LCFI2:
  41              		.cfi_def_cfa_offset 24
  42              		.loc 1 18 0
  43 000c 08C08DE2 		add	ip, sp, #8
  44 0010 14308DE5 		str	r3, [sp, #20]
  45 0014 06000CE9 		stmdb	ip, {r1, r2}
  46 0018 03C0A0E1 		mov	ip, r3
  47 001c 04209DE5 		ldr	r2, [sp, #4]
  48 0020 18109DE5 		ldr	r1, [sp, #24]
  49 0024 00309DE5 		ldr	r3, [sp, #0]
  19:main.c        ****   if ((end.tv_nsec-start.tv_nsec)<0) {
  50              		.loc 1 19 0
  51 0028 024051E0 		subs	r4, r1, r2
  52              		.cfi_offset 4, -12
  53 002c 0700004A 		bmi	.L5
  20:main.c        ****     difference->tv_sec = end.tv_sec-start.tv_sec-1;
  21:main.c        ****     difference->tv_nsec = 1000000000+end.tv_nsec-start.tv_nsec;
  22:main.c        ****   } else {
  23:main.c        ****     difference->tv_sec = end.tv_sec-start.tv_sec;
  54              		.loc 1 23 0
  55 0030 0CC063E0 		rsb	ip, r3, ip
  24:main.c        ****     difference->tv_nsec = end.tv_nsec-start.tv_nsec;
  56              		.loc 1 24 0
  57 0034 044080E5 		str	r4, [r0, #4]
  23:main.c        ****     difference->tv_sec = end.tv_sec-start.tv_sec;
  58              		.loc 1 23 0
  59 0038 00C080E5 		str	ip, [r0, #0]
  60              	.L1:
  25:main.c        ****   }
  26:main.c        **** }
  61              		.loc 1 26 0
  62 003c 0CD08DE2 		add	sp, sp, #12
  63 0040 1000BDE8 		ldmfd	sp!, {r4}
  64 0044 08D08DE2 		add	sp, sp, #8
  65 0048 1EFF2FE1 		bx	lr
  66 004c 00F020E3 		.p2align 4
  67              	.L5:
  21:main.c        ****     difference->tv_nsec = 1000000000+end.tv_nsec-start.tv_nsec;
  68              		.loc 1 21 0
  69 0050 CA4CA0E3 		mov	r4, #51712
  20:main.c        ****     difference->tv_sec = end.tv_sec-start.tv_sec-1;
  70              		.loc 1 20 0
  71 0054 01C04CE2 		sub	ip, ip, #1
  21:main.c        ****     difference->tv_nsec = 1000000000+end.tv_nsec-start.tv_nsec;
  72              		.loc 1 21 0
  73 0058 9A4B43E3 		movt	r4, 15258
  20:main.c        ****     difference->tv_sec = end.tv_sec-start.tv_sec-1;
  74              		.loc 1 20 0
  75 005c 0C3063E0 		rsb	r3, r3, ip
  21:main.c        ****     difference->tv_nsec = 1000000000+end.tv_nsec-start.tv_nsec;
  76              		.loc 1 21 0
  77 0060 044081E0 		add	r4, r1, r4
  20:main.c        ****     difference->tv_sec = end.tv_sec-start.tv_sec-1;
  78              		.loc 1 20 0
  79 0064 003080E5 		str	r3, [r0, #0]
  21:main.c        ****     difference->tv_nsec = 1000000000+end.tv_nsec-start.tv_nsec;
  80              		.loc 1 21 0
  81 0068 042062E0 		rsb	r2, r2, r4
  82 006c 042080E5 		str	r2, [r0, #4]
  83 0070 F1FFFFEA 		b	.L1
  84              		.cfi_endproc
  85              	.LFE1888:
  87              		.align	2
  88 0074 00F020E3 		.p2align 4,,15
  88      00F020E3 
  88      00F020E3 
  89              		.global	init
  91              	init:
  92              	.LFB1889:
  27:main.c        **** 
  28:main.c        **** void init(void) {
  93              		.loc 1 28 0
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 8
  96              		@ frame_needed = 0, uses_anonymous_args = 0
  97              	.LVL1:
  98 0080 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  99              	.LCFI3:
 100              		.cfi_def_cfa_offset 36
 101 0084 00B000E3 		movw	fp, #:lower16:vz
 102              		.cfi_offset 14, -4
 103              		.cfi_offset 11, -8
 104              		.cfi_offset 10, -12
 105              		.cfi_offset 9, -16
 106              		.cfi_offset 8, -20
 107              		.cfi_offset 7, -24
 108              		.cfi_offset 6, -28
 109              		.cfi_offset 5, -32
 110              		.cfi_offset 4, -36
 111 0088 009000E3 		movw	r9, #:lower16:m
  29:main.c        ****   int i;
  30:main.c        **** 
  31:main.c        ****   for(i=0; i<N; i++) { /* Foreach particle "i" ... */
  32:main.c        ****     x[i] = rand();
  33:main.c        ****     y[i] = rand();
  34:main.c        ****     z[i] = rand();
  35:main.c        ****     vx[i] = rand()/100;
 112              		.loc 1 35 0
 113 008c 1F5508E3 		movw	r5, #34079
  28:main.c        **** void init(void) {
 114              		.loc 1 28 0
 115 0090 F0A09FE5 		ldr	sl, .L9
 116 0094 0CD04DE2 		sub	sp, sp, #12
 117              	.LCFI4:
 118              		.cfi_def_cfa_offset 48
  28:main.c        **** void init(void) {
 119              		.loc 1 28 0
 120 0098 EC809FE5 		ldr	r8, .L9+4
 121 009c 0040A0E3 		mov	r4, #0
 122 00a0 E8709FE5 		ldr	r7, .L9+8
 123 00a4 00B040E3 		movt	fp, #:upper16:vz
 124 00a8 E4609FE5 		ldr	r6, .L9+12
 125 00ac 009040E3 		movt	r9, #:upper16:m
 126              		.loc 1 35 0
 127 00b0 EB5145E3 		movt	r5, 20971
 128 00b4 001000E3 		movw	r1, #:lower16:vy
 129 00b8 001040E3 		movt	r1, #:upper16:vy
 130 00bc 04108DE5 		str	r1, [sp, #4]
 131              	.LVL2:
 132              	.L7:
  32:main.c        ****     x[i] = rand();
 133              		.loc 1 32 0 discriminator 2
 134 00c0 FEFFFFEB 		bl	rand
 135 00c4 100A07EE 		fmsr	s14, r0	@ int
 136 00c8 C77AF8EE 		fsitos	s15, s14
 137 00cc 901A17EE 		fmrs	r1, s15
 138 00d0 0410AAE5 		str	r1, [sl, #4]!	@ float
  33:main.c        ****     y[i] = rand();
 139              		.loc 1 33 0 discriminator 2
 140 00d4 FEFFFFEB 		bl	rand
 141 00d8 100A07EE 		fmsr	s14, r0	@ int
 142 00dc C77AF8EE 		fsitos	s15, s14
 143 00e0 901A17EE 		fmrs	r1, s15
 144 00e4 0410A8E5 		str	r1, [r8, #4]!	@ float
  34:main.c        ****     z[i] = rand();
 145              		.loc 1 34 0 discriminator 2
 146 00e8 FEFFFFEB 		bl	rand
 147 00ec 100A07EE 		fmsr	s14, r0	@ int
 148 00f0 C77AF8EE 		fsitos	s15, s14
 149 00f4 901A17EE 		fmrs	r1, s15
 150 00f8 0410A7E5 		str	r1, [r7, #4]!	@ float
 151              		.loc 1 35 0 discriminator 2
 152 00fc FEFFFFEB 		bl	rand
 153 0100 9520C3E0 		smull	r2, r3, r5, r0
 154 0104 C00FA0E1 		mov	r0, r0, asr #31
 155 0108 C30260E0 		rsb	r0, r0, r3, asr #5
 156 010c 100A07EE 		fmsr	s14, r0	@ int
 157 0110 C77AF8EE 		fsitos	s15, s14
 158 0114 901A17EE 		fmrs	r1, s15
 159 0118 0410A6E5 		str	r1, [r6, #4]!	@ float
  36:main.c        ****     vy[i] = rand()/100;
 160              		.loc 1 36 0 discriminator 2
 161 011c FEFFFFEB 		bl	rand
  28:main.c        **** void init(void) {
 162              		.loc 1 28 0 discriminator 2
 163 0120 04209DE5 		ldr	r2, [sp, #4]
 164 0124 043082E0 		add	r3, r2, r4
 165              		.loc 1 36 0 discriminator 2
 166 0128 9510C2E0 		smull	r1, r2, r5, r0
 167 012c C00FA0E1 		mov	r0, r0, asr #31
 168 0130 C20260E0 		rsb	r0, r0, r2, asr #5
 169 0134 100A07EE 		fmsr	s14, r0	@ int
 170 0138 C77AF8EE 		fsitos	s15, s14
 171 013c 007AC3ED 		fsts	s15, [r3, #0]
  37:main.c        ****     vz[i] = rand()/100;
 172              		.loc 1 37 0 discriminator 2
 173 0140 FEFFFFEB 		bl	rand
  28:main.c        **** void init(void) {
 174              		.loc 1 28 0 discriminator 2
 175 0144 04308BE0 		add	r3, fp, r4
 176              		.loc 1 37 0 discriminator 2
 177 0148 9510C2E0 		smull	r1, r2, r5, r0
 178 014c C00FA0E1 		mov	r0, r0, asr #31
 179 0150 C20260E0 		rsb	r0, r0, r2, asr #5
 180 0154 100A07EE 		fmsr	s14, r0	@ int
 181 0158 C77AF8EE 		fsitos	s15, s14
 182 015c 007AC3ED 		fsts	s15, [r3, #0]
  38:main.c        ****     m[i] = rand();
 183              		.loc 1 38 0 discriminator 2
 184 0160 FEFFFFEB 		bl	rand
  28:main.c        **** void init(void) {
 185              		.loc 1 28 0 discriminator 2
 186 0164 043089E0 		add	r3, r9, r4
 187              		.loc 1 38 0 discriminator 2
 188 0168 044084E2 		add	r4, r4, #4
  31:main.c        ****   for(i=0; i<N; i++) { /* Foreach particle "i" ... */
 189              		.loc 1 31 0 discriminator 2
 190 016c FA0E54E3 		cmp	r4, #4000
 191              		.loc 1 38 0 discriminator 2
 192 0170 100A07EE 		fmsr	s14, r0	@ int
 193 0174 C77AF8EE 		fsitos	s15, s14
 194 0178 007AC3ED 		fsts	s15, [r3, #0]
  31:main.c        ****   for(i=0; i<N; i++) { /* Foreach particle "i" ... */
 195              		.loc 1 31 0 discriminator 2
 196 017c CFFFFF1A 		bne	.L7
  39:main.c        ****   }
  40:main.c        **** }
 197              		.loc 1 40 0
 198 0180 0CD08DE2 		add	sp, sp, #12
 199 0184 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 200              	.L10:
 201              		.align	2
 202              	.L9:
 203 0188 FCFFFFFF 		.word	x-4
 204 018c FCFFFFFF 		.word	y-4
 205 0190 FCFFFFFF 		.word	z-4
 206 0194 FCFFFFFF 		.word	vx-4
 207              		.cfi_endproc
 208              	.LFE1889:
 210              		.align	2
 211 0198 00F020E3 		.p2align 4,,15
 211      00F020E3 
 212              		.global	jloop
 214              	jloop:
 215              	.LFB1890:
  41:main.c        **** 
  42:main.c        **** #ifdef ASM
  43:main.c        **** void jloop(float *xj, float *yj, float *zj, float xi, float yi, float zi, float *pax, float *pay, f
 216              		.loc 1 43 0
 217              		.cfi_startproc
 218              		@ args = 20, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 221              	.LVL3:
  44:main.c        ****   int j;
  45:main.c        ****   float invr, invr3, f, ax, ay, az, dx, dy, dz;
  46:main.c        ****   float eps=0.0000001;
  47:main.c        ****   ax = *pax;
  48:main.c        ****   ay = *pay;
  49:main.c        ****   az = *paz;
  50:main.c        ****   for(j=0; j<N; j++) { /* Loop over all particles "j" */
  51:main.c        ****     dx=xj[j]-xi;
  52:main.c        ****     dy=yj[j]-yi;
  53:main.c        ****     dz=zj[j]-zi;
  54:main.c        ****     invr = 1.0/sqrt(dx*dx + dy*dy + dz*dz + eps);
 222              		.loc 1 54 0
 223 01a0 001BF7EE 		fconstd	d17, #112
  49:main.c        ****   az = *paz;
 224              		.loc 1 49 0
 225 01a4 FACFA0E3 		mov	ip, #1000
  43:main.c        **** void jloop(float *xj, float *yj, float *zj, float xi, float yi, float zi, float *pax, float *pay, f
 226              		.loc 1 43 0
 227 01a8 103A03EE 		fmsr	s6, r3
  49:main.c        ****   az = *paz;
 228              		.loc 1 49 0
 229 01ac A4309FE5 		ldr	r3, .L14+4
 230              	.LVL4:
  43:main.c        **** void jloop(float *xj, float *yj, float *zj, float xi, float yi, float zi, float *pax, float *pay, f
 231              		.loc 1 43 0
 232 01b0 F0002DE9 		stmfd	sp!, {r4, r5, r6, r7}
 233              	.LCFI5:
 234              		.cfi_def_cfa_offset 16
 235              		.loc 1 54 0
 236 01b4 263ADFED 		flds	s7, .L14
  43:main.c        **** void jloop(float *xj, float *yj, float *zj, float xi, float yi, float zi, float *pax, float *pay, f
 237              		.loc 1 43 0
 238 01b8 042A9DED 		flds	s4, [sp, #16]
 239 01bc 052ADDED 		flds	s5, [sp, #20]
 240 01c0 18609DE5 		ldr	r6, [sp, #24]
 241              		.cfi_offset 7, -4
 242              		.cfi_offset 6, -8
 243              		.cfi_offset 5, -12
 244              		.cfi_offset 4, -16
  47:main.c        ****   ax = *pax;
 245              		.loc 1 47 0
 246 01c4 004AD6ED 		flds	s9, [r6, #0]
 247              	.LVL5:
  43:main.c        **** void jloop(float *xj, float *yj, float *zj, float xi, float yi, float zi, float *pax, float *pay, f
 248              		.loc 1 43 0
 249 01c8 1C509DE5 		ldr	r5, [sp, #28]
  48:main.c        ****   ay = *pay;
 250              		.loc 1 48 0
 251 01cc 005A95ED 		flds	s10, [r5, #0]
 252              	.LVL6:
  43:main.c        **** void jloop(float *xj, float *yj, float *zj, float xi, float yi, float zi, float *pax, float *pay, f
 253              		.loc 1 43 0
 254 01d0 20409DE5 		ldr	r4, [sp, #32]
  49:main.c        ****   az = *paz;
 255              		.loc 1 49 0
 256 01d4 005AD4ED 		flds	s11, [r4, #0]
 257              	.LVL7:
 258              	.L12:
  52:main.c        ****     dy=yj[j]-yi;
 259              		.loc 1 52 0 discriminator 2
 260 01d8 017AF1EC 		fldmias	r1!, {s15}
 261 01dc C27A77EE 		fsubs	s15, s15, s4
  51:main.c        ****     dx=xj[j]-xi;
 262              		.loc 1 51 0 discriminator 2
 263 01e0 017AB0EC 		fldmias	r0!, {s14}
  53:main.c        ****     dz=zj[j]-zi;
 264              		.loc 1 53 0 discriminator 2
 265 01e4 016AB2EC 		fldmias	r2!, {s12}
  55:main.c        ****     invr3 = invr*invr*invr;
  56:main.c        ****     f=m[j]*invr3;
 266              		.loc 1 56 0 discriminator 2
 267 01e8 043083E2 		add	r3, r3, #4
 268 01ec 004A93ED 		flds	s8, [r3, #0]
  50:main.c        ****   for(j=0; j<N; j++) { /* Loop over all particles "j" */
 269              		.loc 1 50 0 discriminator 2
 270 01f0 01C05CE2 		subs	ip, ip, #1
 271              		.loc 1 56 0 discriminator 2
 272 01f4 0370A0E1 		mov	r7, r3
  54:main.c        ****     invr = 1.0/sqrt(dx*dx + dy*dy + dz*dz + eps);
 273              		.loc 1 54 0 discriminator 2
 274 01f8 A76A67EE 		fmuls	s13, s15, s15
  51:main.c        ****     dx=xj[j]-xi;
 275              		.loc 1 51 0 discriminator 2
 276 01fc 437A37EE 		fsubs	s14, s14, s6
 277              	.LVL8:
  54:main.c        ****     invr = 1.0/sqrt(dx*dx + dy*dy + dz*dz + eps);
 278              		.loc 1 54 0 discriminator 2
 279 0200 076A47EE 		fmacs	s13, s14, s14
  53:main.c        ****     dz=zj[j]-zi;
 280              		.loc 1 53 0 discriminator 2
 281 0204 626A36EE 		fsubs	s12, s12, s5
  54:main.c        ****     invr = 1.0/sqrt(dx*dx + dy*dy + dz*dz + eps);
 282              		.loc 1 54 0 discriminator 2
 283 0208 A36A76EE 		fadds	s13, s13, s7
 284 020c 066A46EE 		fmacs	s13, s12, s12
 285 0210 E60AF7EE 		fcvtds	d16, s13
 286 0214 E00BF1EE 		fsqrtd	d16, d16
 287              	.LVL9:
 288 0218 A00BC1EE 		fdivd	d16, d17, d16
 289              	.LVL10:
 290 021c E06BF7EE 		fcvtsd	s13, d16
  55:main.c        ****     invr3 = invr*invr*invr;
 291              		.loc 1 55 0 discriminator 2
 292 0220 A66A26EE 		fmuls	s12, s13, s13
 293 0224 866A66EE 		fmuls	s13, s13, s12
 294              	.LVL11:
 295              		.loc 1 56 0 discriminator 2
 296 0228 846A66EE 		fmuls	s13, s13, s8
 297              	.LVL12:
  57:main.c        ****     ax += f*dx; /* accumulate the acceleration from gravitational attraction */
 298              		.loc 1 57 0 discriminator 2
 299 022c 877A26EE 		fmuls	s14, s13, s14
 300              	.LVL13:
  58:main.c        ****     ay += f*dy;
 301              		.loc 1 58 0 discriminator 2
 302 0230 A75A06EE 		fmacs	s10, s13, s15
 303              	.LVL14:
  57:main.c        ****     ax += f*dx; /* accumulate the acceleration from gravitational attraction */
 304              		.loc 1 57 0 discriminator 2
 305 0234 874A74EE 		fadds	s9, s9, s14
 306              	.LVL15:
  59:main.c        ****     az += f*dx;
 307              		.loc 1 59 0 discriminator 2
 308 0238 875A75EE 		fadds	s11, s11, s14
 309              	.LVL16:
  50:main.c        ****   for(j=0; j<N; j++) { /* Loop over all particles "j" */
 310              		.loc 1 50 0 discriminator 2
 311 023c E5FFFF1A 		bne	.L12
  60:main.c        ****   }
  61:main.c        ****   *pax = ax;
 312              		.loc 1 61 0
 313 0240 004AC6ED 		fsts	s9, [r6, #0]
  62:main.c        ****   *pay = ay;
 314              		.loc 1 62 0
 315 0244 005A85ED 		fsts	s10, [r5, #0]
  63:main.c        ****   *paz = az;
 316              		.loc 1 63 0
 317 0248 005AC4ED 		fsts	s11, [r4, #0]
  64:main.c        **** }
 318              		.loc 1 64 0
 319 024c F000BDE8 		ldmfd	sp!, {r4, r5, r6, r7}
 320 0250 1EFF2FE1 		bx	lr
 321              	.L15:
 322              		.align	2
 323              	.L14:
 324 0254 95BFD633 		.word	869711765
 325 0258 FCFFFFFF 		.word	m-4
 326              		.cfi_endproc
 327              	.LFE1890:
 329              		.global	__aeabi_idiv
 330              		.align	2
 331 025c 00F020E3 		.p2align 4,,15
 332              		.global	main
 334              	main:
 335              	.LFB1891:
  65:main.c        **** #endif
  66:main.c        **** 
  67:main.c        **** int main (int argc, char * argv[]) {
 336              		.loc 1 67 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 48
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              	.LVL17:
 341 0260 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 342              	.LCFI6:
 343              		.cfi_def_cfa_offset 36
 344 0264 44D04DE2 		sub	sp, sp, #68
 345              	.LCFI7:
 346              		.cfi_def_cfa_offset 104
  68:main.c        ****   int s,i,j;
  69:main.c        ****   float invr[N], f, ax, ay, az, dx[N], dy[N], dz[N], dt=0.001;
  70:main.c        ****   float eps=0.0000001;
  71:main.c        ****   struct timespec t1, t2, d;
  72:main.c        ****   FILE *fp;
  73:main.c        ****   char *outputFilename = "results.txt";
  74:main.c        ****   float in_sqrt[N];
  75:main.c        ****   //float *p_in_sqrt = &in_sqrt[0];
  76:main.c        ****   //float *p_invr = &invr[0];
  77:main.c        ****   float32x4_t vec_invr;
  78:main.c        **** 
  79:main.c        ****   enable_runfast();
 347              		.loc 1 79 0
 348              		.cfi_offset 14, -4
 349              		.cfi_offset 11, -8
 350              		.cfi_offset 10, -12
 351              		.cfi_offset 9, -16
 352              		.cfi_offset 8, -20
 353              		.cfi_offset 7, -24
 354              		.cfi_offset 6, -28
 355              		.cfi_offset 5, -32
 356              		.cfi_offset 4, -36
 357 0268 FEFFFFEB 		bl	enable_runfast
 358              	.LVL18:
 359 026c E8239FE5 		ldr	r2, .L34+16
 360 0270 E8339FE5 		ldr	r3, .L34+20
 361 0274 007000E3 		movw	r7, #:lower16:vy
 362 0278 E4139FE5 		ldr	r1, .L34+24
 363 027c 006000E3 		movw	r6, #:lower16:vz
 364 0280 004000E3 		movw	r4, #:lower16:m
 365 0284 DC939FE5 		ldr	r9, .L34+28
 366 0288 03A0A0E1 		mov	sl, r3
 367 028c 0280A0E1 		mov	r8, r2
 368 0290 0050A0E3 		mov	r5, #0
 369 0294 007040E3 		movt	r7, #:upper16:vy
 370 0298 006040E3 		movt	r6, #:upper16:vz
 371 029c 004040E3 		movt	r4, #:upper16:m
 372 02a0 2C108DE5 		str	r1, [sp, #44]
 373 02a4 24208DE5 		str	r2, [sp, #36]
 374 02a8 28308DE5 		str	r3, [sp, #40]
 375 02ac 18108DE5 		str	r1, [sp, #24]
 376              	.LVL19:
 377              	.L17:
 378              	.LBB10:
 379              	.LBB11:
  32:main.c        ****     x[i] = rand();
 380              		.loc 1 32 0
 381 02b0 FEFFFFEB 		bl	rand
 382 02b4 18209DE5 		ldr	r2, [sp, #24]
  67:main.c        **** int main (int argc, char * argv[]) {
 383              		.loc 1 67 0
 384 02b8 073085E0 		add	r3, r5, r7
 385 02bc 06B085E0 		add	fp, r5, r6
  32:main.c        ****     x[i] = rand();
 386              		.loc 1 32 0
 387 02c0 100A07EE 		fmsr	s14, r0	@ int
 388 02c4 C77AF8EE 		fsitos	s15, s14
 389 02c8 901A17EE 		fmrs	r1, s15
 390 02cc 0410A2E5 		str	r1, [r2, #4]!	@ float
  33:main.c        ****     y[i] = rand();
 391              		.loc 1 33 0
 392 02d0 14308DE5 		str	r3, [sp, #20]
  32:main.c        ****     x[i] = rand();
 393              		.loc 1 32 0
 394 02d4 18208DE5 		str	r2, [sp, #24]
  33:main.c        ****     y[i] = rand();
 395              		.loc 1 33 0
 396 02d8 FEFFFFEB 		bl	rand
 397 02dc 100A07EE 		fmsr	s14, r0	@ int
 398 02e0 C77AF8EE 		fsitos	s15, s14
 399 02e4 901A17EE 		fmrs	r1, s15
 400 02e8 0410A8E5 		str	r1, [r8, #4]!	@ float
  34:main.c        ****     z[i] = rand();
 401              		.loc 1 34 0
 402 02ec FEFFFFEB 		bl	rand
 403 02f0 100A07EE 		fmsr	s14, r0	@ int
 404 02f4 C77AF8EE 		fsitos	s15, s14
 405 02f8 901A17EE 		fmrs	r1, s15
 406 02fc 0410AAE5 		str	r1, [sl, #4]!	@ float
  35:main.c        ****     vx[i] = rand()/100;
 407              		.loc 1 35 0
 408 0300 FEFFFFEB 		bl	rand
 409 0304 6410A0E3 		mov	r1, #100
 410 0308 FEFFFFEB 		bl	__aeabi_idiv
 411 030c 100A07EE 		fmsr	s14, r0	@ int
 412 0310 C77AF8EE 		fsitos	s15, s14
 413 0314 901A17EE 		fmrs	r1, s15
 414 0318 0410A9E5 		str	r1, [r9, #4]!	@ float
  36:main.c        ****     vy[i] = rand()/100;
 415              		.loc 1 36 0
 416 031c FEFFFFEB 		bl	rand
 417 0320 6410A0E3 		mov	r1, #100
 418 0324 FEFFFFEB 		bl	__aeabi_idiv
 419 0328 14309DE5 		ldr	r3, [sp, #20]
 420 032c 100A07EE 		fmsr	s14, r0	@ int
 421 0330 C77AF8EE 		fsitos	s15, s14
 422 0334 007AC3ED 		fsts	s15, [r3, #0]
  37:main.c        ****     vz[i] = rand()/100;
 423              		.loc 1 37 0
 424 0338 FEFFFFEB 		bl	rand
 425 033c 6410A0E3 		mov	r1, #100
 426 0340 FEFFFFEB 		bl	__aeabi_idiv
 427 0344 100A07EE 		fmsr	s14, r0	@ int
 428 0348 C77AF8EE 		fsitos	s15, s14
 429 034c 007ACBED 		fsts	s15, [fp, #0]
  38:main.c        ****     m[i] = rand();
 430              		.loc 1 38 0
 431 0350 FEFFFFEB 		bl	rand
  67:main.c        **** int main (int argc, char * argv[]) {
 432              		.loc 1 67 0
 433 0354 053084E0 		add	r3, r4, r5
  38:main.c        ****     m[i] = rand();
 434              		.loc 1 38 0
 435 0358 045085E2 		add	r5, r5, #4
  31:main.c        ****   for(i=0; i<N; i++) { /* Foreach particle "i" ... */
 436              		.loc 1 31 0
 437 035c FA0E55E3 		cmp	r5, #4000
  38:main.c        ****     m[i] = rand();
 438              		.loc 1 38 0
 439 0360 100A07EE 		fmsr	s14, r0	@ int
 440 0364 C77AF8EE 		fsitos	s15, s14
 441 0368 007AC3ED 		fsts	s15, [r3, #0]
  31:main.c        ****   for(i=0; i<N; i++) { /* Foreach particle "i" ... */
 442              		.loc 1 31 0
 443 036c CFFFFF1A 		bne	.L17
 444              	.LBE11:
 445              	.LBE10:
  80:main.c        ****   init();
  81:main.c        **** 
  82:main.c        ****   clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &t1);
 446              		.loc 1 82 0
 447 0370 38108DE2 		add	r1, sp, #56
 448 0374 0200A0E3 		mov	r0, #2
 449 0378 FEFFFFEB 		bl	clock_gettime
 450              	.LVL20:
 451              	.LBB12:
 452              	.LBB14:
  54:main.c        ****     invr = 1.0/sqrt(dx*dx + dy*dy + dz*dz + eps);
 453              		.loc 1 54 0
 454 037c 004BF7EE 		fconstd	d20, #112
 455 0380 00B000E3 		movw	fp, #:lower16:y
 456 0384 000000E3 		movw	r0, #:lower16:z
 457 0388 009000E3 		movw	r9, #:lower16:xnew
 458 038c 00B040E3 		movt	fp, #:upper16:y
 459 0390 000040E3 		movt	r0, #:upper16:z
 460 0394 009040E3 		movt	r9, #:upper16:xnew
 461 0398 001000E3 		movw	r1, #:lower16:ynew
 462 039c 002000E3 		movw	r2, #:lower16:znew
 463              	.LBE14:
 464              	.LBE12:
 465              		.loc 1 82 0
 466 03a0 1030A0E3 		mov	r3, #16
 467 03a4 001040E3 		movt	r1, #:upper16:ynew
 468 03a8 002040E3 		movt	r2, #:upper16:znew
 469 03ac 20308DE5 		str	r3, [sp, #32]
 470 03b0 18108DE5 		str	r1, [sp, #24]
 471              	.LBB16:
 472              	.LBB13:
  54:main.c        ****     invr = 1.0/sqrt(dx*dx + dy*dy + dz*dz + eps);
 473              		.loc 1 54 0
 474 03b4 A44A9FED 		flds	s8, .L34
 475 03b8 1C208DE5 		str	r2, [sp, #28]
 476              	.LBE13:
 477              	.LBE16:
  83:main.c        **** //printf("time: %d s %d ns\n", (int)t1.tv_sec, (int)t1.tv_nsec);
  84:main.c        **** 
  85:main.c        **** #ifdef ASM
  86:main.c        ****   for (s=0; s<STEPS; s++) {
  87:main.c        ****     for(i=0; i<N; i++) { /* Foreach particle "i" ... */
  88:main.c        ****       ax=0.0f;
  89:main.c        ****       ay=0.0f;
  90:main.c        ****       az=0.0f;
  91:main.c        ****       jloop(&x[0], &y[0], &z[0], x[i], y[i], z[i], &ax, &ay, &az);
  92:main.c        ****       xnew[i] = x[i] + dt*vx[i] + 0.5f*dt*dt*ax; /* update position of particle "i" */
 478              		.loc 1 92 0
 479 03bc A33ADFED 		flds	s7, .L34+4
 480              	.LVL21:
 481              	.L18:
  86:main.c        ****   for (s=0; s<STEPS; s++) {
 482              		.loc 1 86 0 discriminator 1
 483 03c0 006000E3 		movw	r6, #:lower16:vx
 484 03c4 005000E3 		movw	r5, #:lower16:vy
 485 03c8 00E000E3 		movw	lr, #:lower16:vz
  79:main.c        ****   enable_runfast();
 486              		.loc 1 79 0 discriminator 1
 487 03cc 90729FE5 		ldr	r7, .L34+24
  86:main.c        ****   for (s=0; s<STEPS; s++) {
 488              		.loc 1 86 0 discriminator 1
 489 03d0 006040E3 		movt	r6, #:upper16:vx
 490 03d4 005040E3 		movt	r5, #:upper16:vy
 491 03d8 00E040E3 		movt	lr, #:upper16:vz
  79:main.c        ****   enable_runfast();
 492              		.loc 1 79 0 discriminator 1
 493 03dc 00C0A0E3 		mov	ip, #0
 494              		.loc 1 92 0 discriminator 1
 495 03e0 9B1ADFED 		flds	s3, .L34+8
 496              	.LVL22:
 497              	.L20:
  48:main.c        ****   ay = *pay;
 498              		.loc 1 48 0 discriminator 2
 499 03e4 9B5ADFED 		flds	s11, .L34+12
  47:main.c        ****   ax = *pax;
 500              		.loc 1 47 0 discriminator 2
 501 03e8 655AB0EE 		fcpys	s10, s11
  91:main.c        ****       jloop(&x[0], &y[0], &z[0], x[i], y[i], z[i], &ax, &ay, &az);
 502              		.loc 1 91 0 discriminator 2
 503 03ec 68129FE5 		ldr	r1, .L34+16
 504 03f0 0030A0E3 		mov	r3, #0
 505 03f4 68229FE5 		ldr	r2, .L34+24
 506 03f8 047087E2 		add	r7, r7, #4
  67:main.c        **** int main (int argc, char * argv[]) {
 507              		.loc 1 67 0 discriminator 2
 508 03fc 0BA08CE0 		add	sl, ip, fp
 509 0400 0C8080E0 		add	r8, r0, ip
  91:main.c        ****       jloop(&x[0], &y[0], &z[0], x[i], y[i], z[i], &ax, &ay, &az);
 510              		.loc 1 91 0 discriminator 2
 511 0404 002AD7ED 		flds	s5, [r7, #0]
 512 0408 002A9AED 		flds	s4, [sl, #0]
 513 040c 003A98ED 		flds	s6, [r8, #0]
 514              	.LVL23:
 515              	.L19:
 516              	.LBB17:
 517              	.LBB15:
  52:main.c        ****     dy=yj[j]-yi;
 518              		.loc 1 52 0
 519 0410 041081E2 		add	r1, r1, #4
 520 0414 007AD1ED 		flds	s15, [r1, #0]
 521 0418 C27A77EE 		fsubs	s15, s15, s4
  51:main.c        ****     dx=xj[j]-xi;
 522              		.loc 1 51 0
 523 041c 042082E2 		add	r2, r2, #4
 524 0420 007A92ED 		flds	s14, [r2, #0]
  67:main.c        **** int main (int argc, char * argv[]) {
 525              		.loc 1 67 0
 526 0424 038080E0 		add	r8, r0, r3
  53:main.c        ****     dz=zj[j]-zi;
 527              		.loc 1 53 0
 528 0428 006A98ED 		flds	s12, [r8, #0]
  67:main.c        **** int main (int argc, char * argv[]) {
 529              		.loc 1 67 0
 530 042c 038084E0 		add	r8, r4, r3
  56:main.c        ****     f=m[j]*invr3;
 531              		.loc 1 56 0
 532 0430 004AD8ED 		flds	s9, [r8, #0]
  58:main.c        ****     ay += f*dy;
 533              		.loc 1 58 0
 534 0434 043083E2 		add	r3, r3, #4
  50:main.c        ****   for(j=0; j<N; j++) { /* Loop over all particles "j" */
 535              		.loc 1 50 0
 536 0438 FA0E53E3 		cmp	r3, #4000
  54:main.c        ****     invr = 1.0/sqrt(dx*dx + dy*dy + dz*dz + eps);
 537              		.loc 1 54 0
 538 043c A76A67EE 		fmuls	s13, s15, s15
  51:main.c        ****     dx=xj[j]-xi;
 539              		.loc 1 51 0
 540 0440 627A37EE 		fsubs	s14, s14, s5
 541              	.LVL24:
  54:main.c        ****     invr = 1.0/sqrt(dx*dx + dy*dy + dz*dz + eps);
 542              		.loc 1 54 0
 543 0444 076A47EE 		fmacs	s13, s14, s14
  53:main.c        ****     dz=zj[j]-zi;
 544              		.loc 1 53 0
 545 0448 436A36EE 		fsubs	s12, s12, s6
  54:main.c        ****     invr = 1.0/sqrt(dx*dx + dy*dy + dz*dz + eps);
 546              		.loc 1 54 0
 547 044c 846A76EE 		fadds	s13, s13, s8
 548 0450 066A46EE 		fmacs	s13, s12, s12
 549 0454 E60AF7EE 		fcvtds	d16, s13
 550 0458 E00BF1EE 		fsqrtd	d16, d16
 551              	.LVL25:
 552 045c A00BC4EE 		fdivd	d16, d20, d16
 553              	.LVL26:
 554 0460 E06BF7EE 		fcvtsd	s13, d16
  55:main.c        ****     invr3 = invr*invr*invr;
 555              		.loc 1 55 0
 556 0464 A66A26EE 		fmuls	s12, s13, s13
 557 0468 866A66EE 		fmuls	s13, s13, s12
 558              	.LVL27:
  56:main.c        ****     f=m[j]*invr3;
 559              		.loc 1 56 0
 560 046c A46A66EE 		fmuls	s13, s13, s9
 561              	.LVL28:
  57:main.c        ****     ax += f*dx; /* accumulate the acceleration from gravitational attraction */
 562              		.loc 1 57 0
 563 0470 875A06EE 		fmacs	s10, s13, s14
 564              	.LVL29:
  58:main.c        ****     ay += f*dy;
 565              		.loc 1 58 0
 566 0474 A75A46EE 		fmacs	s11, s13, s15
 567              	.LVL30:
  50:main.c        ****   for(j=0; j<N; j++) { /* Loop over all particles "j" */
 568              		.loc 1 50 0
 569 0478 E4FFFF1A 		bne	.L19
 570              	.LVL31:
 571              	.LBE15:
 572              	.LBE17:
  93:main.c        ****       ynew[i] = y[i] + dt*vy[i] + 0.5f*dt*dt*ay;
 573              		.loc 1 93 0
 574 047c 004AD5ED 		flds	s9, [r5, #0]
 575 0480 A12A04EE 		fmacs	s4, s9, s3
  92:main.c        ****       xnew[i] = x[i] + dt*vx[i] + 0.5f*dt*dt*ax; /* update position of particle "i" */
 576              		.loc 1 92 0
 577 0484 006AD6ED 		flds	s13, [r6, #0]
 578              	.LVL32:
  94:main.c        ****       znew[i] = z[i] + dt*vz[i] + 0.5f*dt*dt*az;
 579              		.loc 1 94 0
 580 0488 007ADEED 		flds	s15, [lr, #0]
 581              	.LVL33:
  67:main.c        **** int main (int argc, char * argv[]) {
 582              		.loc 1 67 0
 583 048c 18309DE5 		ldr	r3, [sp, #24]
 584 0490 09208CE0 		add	r2, ip, r9
 585 0494 1C809DE5 		ldr	r8, [sp, #28]
 586 0498 03108CE0 		add	r1, ip, r3
 587 049c 08308CE0 		add	r3, ip, r8
  95:main.c        ****       vx[i] += dt*ax; /* update velocity of particle "i" */
  96:main.c        ****       vy[i] += dt*ay;
  97:main.c        ****       vz[i] += dt*az;
 588              		.loc 1 97 0
 589 04a0 04C08CE2 		add	ip, ip, #4
  87:main.c        ****     for(i=0; i<N; i++) { /* Foreach particle "i" ... */
 590              		.loc 1 87 0
 591 04a4 FA0E5CE3 		cmp	ip, #4000
  92:main.c        ****       xnew[i] = x[i] + dt*vx[i] + 0.5f*dt*dt*ax; /* update position of particle "i" */
 592              		.loc 1 92 0
 593 04a8 A12A46EE 		fmacs	s5, s13, s3
  94:main.c        ****       znew[i] = z[i] + dt*vz[i] + 0.5f*dt*dt*az;
 594              		.loc 1 94 0
 595 04ac A13A07EE 		fmacs	s6, s15, s3
 596              	.LVL34:
  92:main.c        ****       xnew[i] = x[i] + dt*vx[i] + 0.5f*dt*dt*ax; /* update position of particle "i" */
 597              		.loc 1 92 0
 598 04b0 236A25EE 		fmuls	s12, s10, s7
  95:main.c        ****       vx[i] += dt*ax; /* update velocity of particle "i" */
 599              		.loc 1 95 0
 600 04b4 217A25EE 		fmuls	s14, s10, s3
 601              	.LVL35:
  93:main.c        ****       ynew[i] = y[i] + dt*vy[i] + 0.5f*dt*dt*ay;
 602              		.loc 1 93 0
 603 04b8 A32A05EE 		fmacs	s4, s11, s7
  96:main.c        ****       vy[i] += dt*ay;
 604              		.loc 1 96 0
 605 04bc A14A45EE 		fmacs	s9, s11, s3
  93:main.c        ****       ynew[i] = y[i] + dt*vy[i] + 0.5f*dt*dt*ay;
 606              		.loc 1 93 0
 607 04c0 002A81ED 		fsts	s4, [r1, #0]
  92:main.c        ****       xnew[i] = x[i] + dt*vx[i] + 0.5f*dt*dt*ax; /* update position of particle "i" */
 608              		.loc 1 92 0
 609 04c4 865A72EE 		fadds	s11, s5, s12
 610              	.LVL36:
  96:main.c        ****       vy[i] += dt*ay;
 611              		.loc 1 96 0
 612 04c8 014AE5EC 		fstmias	r5!, {s9}
  94:main.c        ****       znew[i] = z[i] + dt*vz[i] + 0.5f*dt*dt*az;
 613              		.loc 1 94 0
 614 04cc 066A33EE 		fadds	s12, s6, s12
  92:main.c        ****       xnew[i] = x[i] + dt*vx[i] + 0.5f*dt*dt*ax; /* update position of particle "i" */
 615              		.loc 1 92 0
 616 04d0 005AC2ED 		fsts	s11, [r2, #0]
  95:main.c        ****       vx[i] += dt*ax; /* update velocity of particle "i" */
 617              		.loc 1 95 0
 618 04d4 266A77EE 		fadds	s13, s14, s13
  94:main.c        ****       znew[i] = z[i] + dt*vz[i] + 0.5f*dt*dt*az;
 619              		.loc 1 94 0
 620 04d8 006A83ED 		fsts	s12, [r3, #0]
 621              		.loc 1 97 0
 622 04dc 277A77EE 		fadds	s15, s14, s15
  95:main.c        ****       vx[i] += dt*ax; /* update velocity of particle "i" */
 623              		.loc 1 95 0
 624 04e0 016AE6EC 		fstmias	r6!, {s13}
 625              		.loc 1 97 0
 626 04e4 017AEEEC 		fstmias	lr!, {s15}
  87:main.c        ****     for(i=0; i<N; i++) { /* Foreach particle "i" ... */
 627              		.loc 1 87 0
 628 04e8 BDFFFF1A 		bne	.L20
 629 04ec 003000E3 		movw	r3, #:lower16:z
 630 04f0 005000E3 		movw	r5, #:lower16:xnew
 631 04f4 003040E3 		movt	r3, #:upper16:z
 632 04f8 00E000E3 		movw	lr, #:lower16:x
 633 04fc 00C000E3 		movw	ip, #:lower16:ynew
 634 0500 001000E3 		movw	r1, #:lower16:y
 635 0504 002000E3 		movw	r2, #:lower16:znew
 636 0508 005040E3 		movt	r5, #:upper16:xnew
 637 050c 00E040E3 		movt	lr, #:upper16:x
 638 0510 00C040E3 		movt	ip, #:upper16:ynew
 639 0514 001040E3 		movt	r1, #:upper16:y
 640 0518 002040E3 		movt	r2, #:upper16:znew
  67:main.c        **** int main (int argc, char * argv[]) {
 641              		.loc 1 67 0
 642 051c FA6E83E2 		add	r6, r3, #4000
 643              	.L21:
  98:main.c        ****     }
  99:main.c        ****     for(i=0;i<N;i++) { /* copy updated positions back into original arrays */
 100:main.c        ****       x[i] = xnew[i];
 101:main.c        ****       y[i] = ynew[i];
 102:main.c        ****       z[i] = znew[i];
 644              		.loc 1 102 0 discriminator 2
 645 0520 040BF2EC 		vldmia	r2!, {d16-d17}
 646 0524 040BE3EC 		vstmia	r3!, {d16-d17}
 647 0528 060053E1 		cmp	r3, r6
 100:main.c        ****       x[i] = xnew[i];
 648              		.loc 1 100 0 discriminator 2
 649 052c 042BF5EC 		vldmia	r5!, {d18-d19}
 101:main.c        ****       y[i] = ynew[i];
 650              		.loc 1 101 0 discriminator 2
 651 0530 040BFCEC 		vldmia	ip!, {d16-d17}
 100:main.c        ****       x[i] = xnew[i];
 652              		.loc 1 100 0 discriminator 2
 653 0534 042BEEEC 		vstmia	lr!, {d18-d19}
 101:main.c        ****       y[i] = ynew[i];
 654              		.loc 1 101 0 discriminator 2
 655 0538 040BE1EC 		vstmia	r1!, {d16-d17}
 656              		.loc 1 102 0 discriminator 2
 657 053c F7FFFF1A 		bne	.L21
  86:main.c        ****   for (s=0; s<STEPS; s++) {
 658              		.loc 1 86 0
 659 0540 20A09DE5 		ldr	sl, [sp, #32]
 660              	.LVL37:
 661 0544 01A05AE2 		subs	sl, sl, #1
 662 0548 20A08DE5 		str	sl, [sp, #32]
 663 054c 9BFFFF1A 		bne	.L18
 103:main.c        ****     }
 104:main.c        ****   }
 105:main.c        **** #endif
 106:main.c        **** #ifdef INTRINSICS
 107:main.c        ****   for (s=0; s<STEPS; s++) {
 108:main.c        ****     for(i=0; i<N; i++) { /* Foreach particle "i" ... */
 109:main.c        ****       ax=0.0f;
 110:main.c        ****       ay=0.0f;
 111:main.c        ****       az=0.0f;
 112:main.c        ****       for(j=0; j<N; j++) { /* Loop over all particles "j" */
 113:main.c        **** 	      dx[j]=x[j]-x[i];
 114:main.c        **** 	      dy[j]=y[j]-y[i];
 115:main.c        **** 	      dz[j]=z[j]-z[i];
 116:main.c        **** 	      in_sqrt[j] = dx[j]*dx[j] + dy[j]*dy[j] + dz[j]*dz[j] + eps;
 117:main.c        **** 	    }
 118:main.c        **** 	    for(j=0; j<N; j+=4) { /* Loop over all particles "j" */
 119:main.c        ****               //invr[j] = 1.0f/sqrtf(in_sqrt[j]);
 120:main.c        ****               vec_invr = vld1q_f32(&in_sqrt[j]);
 121:main.c        ****               vec_invr = vrsqrteq_f32(vec_invr);
 122:main.c        ****               vst1q_f32(&invr[j], vec_invr);
 123:main.c        ****               //p_in_sqrt += 4;
 124:main.c        ****               //p_invr += 4;
 125:main.c        **** 	    }
 126:main.c        **** 	    for(j=0; j<N; j++) { /* Loop over all particles "j" */
 127:main.c        **** 	      f=m[j]*invr[j]*invr[j]*invr[j];
 128:main.c        **** 	      ax += f*dx[j]; /* accumulate the acceleration from gravitational attraction */
 129:main.c        **** 	      ay += f*dy[j];
 130:main.c        **** 	      az += f*dx[j];
 131:main.c        ****       }
 132:main.c        ****       xnew[i] = x[i] + dt*vx[i] + 0.5f*dt*dt*ax; /* update position of particle "i" */
 133:main.c        ****       ynew[i] = y[i] + dt*vy[i] + 0.5f*dt*dt*ay;
 134:main.c        ****       znew[i] = z[i] + dt*vz[i] + 0.5f*dt*dt*az;
 135:main.c        ****       vx[i] += dt*ax; /* update velocity of particle "i" */
 136:main.c        ****       vy[i] += dt*ay;
 137:main.c        ****       vz[i] += dt*az;
 138:main.c        ****     }
 139:main.c        ****     for(i=0;i<N;i++) { /* copy updated positions back into original arrays */
 140:main.c        ****       x[i] = xnew[i];
 141:main.c        ****       y[i] = ynew[i];
 142:main.c        ****       z[i] = znew[i];
 143:main.c        ****     }
 144:main.c        ****   }
 145:main.c        **** #endif
 146:main.c        ****   clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &t2);
 664              		.loc 1 146 0
 665 0550 30108DE2 		add	r1, sp, #48
 666 0554 0200A0E3 		mov	r0, #2
 667 0558 FEFFFFEB 		bl	clock_gettime
 668              	.LVL38:
 147:main.c        ****   
 148:main.c        ****   // Print results to file so we can compare to ensure optimizations do not alter functionality
 149:main.c        ****   fp = fopen(outputFilename, "w");
 669              		.loc 1 149 0
 670 055c 000000E3 		movw	r0, #:lower16:.LC0
 671 0560 001000E3 		movw	r1, #:lower16:.LC1
 672 0564 000040E3 		movt	r0, #:upper16:.LC0
 673 0568 001040E3 		movt	r1, #:upper16:.LC1
 674 056c FEFFFFEB 		bl	fopen
 675              	.LVL39:
 150:main.c        ****   if (fp == NULL) {
 676              		.loc 1 150 0
 677 0570 005050E2 		subs	r5, r0, #0
 678 0574 2A00000A 		beq	.L33
 679 0578 0580A0E1 		mov	r8, r5
 680 057c 28609DE5 		ldr	r6, [sp, #40]
 681 0580 24509DE5 		ldr	r5, [sp, #36]
 682 0584 FA4FA0E3 		mov	r4, #1000
 683 0588 2C709DE5 		ldr	r7, [sp, #44]
 684              	.LVL40:
 685              	.L23:
 151:main.c        ****     fprintf(stderr, "Can't open output file %s!\n", outputFilename);
 152:main.c        ****     exit(1);
 153:main.c        ****   }
 154:main.c        ****   for (i=0; i<N; i++) {
 155:main.c        **** 	fprintf(fp, "%f %f %f\n", x[i], y[i], z[i]);
 686              		.loc 1 155 0 discriminator 2
 687 058c 045085E2 		add	r5, r5, #4
 688 0590 006AD5ED 		flds	s13, [r5, #0]
 689 0594 E61AF7EE 		fcvtds	d17, s13
 690 0598 046086E2 		add	r6, r6, #4
 691 059c 047087E2 		add	r7, r7, #4
 692 05a0 007A96ED 		flds	s14, [r6, #0]
 693 05a4 007AD7ED 		flds	s15, [r7, #0]
 694 05a8 001000E3 		movw	r1, #:lower16:.LC3
 695 05ac 0800A0E1 		mov	r0, r8
 696 05b0 001040E3 		movt	r1, #:upper16:.LC3
 697 05b4 001BCDED 		fstd	d17, [sp, #0]
 698 05b8 E71AF7EE 		fcvtds	d17, s15
 699 05bc C70AF7EE 		fcvtds	d16, s14
 700 05c0 312B53EC 		fmrrd	r2, r3, d17
 701 05c4 020BCDED 		fstd	d16, [sp, #8]
 702 05c8 FEFFFFEB 		bl	fprintf
 154:main.c        ****   for (i=0; i<N; i++) {
 703              		.loc 1 154 0 discriminator 2
 704 05cc 014054E2 		subs	r4, r4, #1
 705 05d0 EDFFFF1A 		bne	.L23
 156:main.c        ****   }
 157:main.c        ****   fclose(fp);
 706              		.loc 1 157 0
 707 05d4 0800A0E1 		mov	r0, r8
 708 05d8 0850A0E1 		mov	r5, r8
 709 05dc FEFFFFEB 		bl	fclose
 710 05e0 34008DE2 		add	r0, sp, #52
 711 05e4 30C09DE5 		ldr	ip, [sp, #48]
 712 05e8 0B0090E8 		ldmia	r0, {r0, r1, r3}
 713              	.LVL41:
 714              	.LBB18:
 715              	.LBB19:
  19:main.c        ****   if ((end.tv_nsec-start.tv_nsec)<0) {
 716              		.loc 1 19 0
 717 05ec 032050E0 		subs	r2, r0, r3
  21:main.c        ****     difference->tv_nsec = 1000000000+end.tv_nsec-start.tv_nsec;
 718              		.loc 1 21 0
 719 05f0 CA2CA043 		movmi	r2, #51712
  20:main.c        ****     difference->tv_sec = end.tv_sec-start.tv_sec-1;
 720              		.loc 1 20 0
 721 05f4 01C04C42 		submi	ip, ip, #1
  21:main.c        ****     difference->tv_nsec = 1000000000+end.tv_nsec-start.tv_nsec;
 722              		.loc 1 21 0
 723 05f8 9A2B4343 		movtmi	r2, 15258
  20:main.c        ****     difference->tv_sec = end.tv_sec-start.tv_sec-1;
 724              		.loc 1 20 0
 725 05fc 0C106140 		rsbmi	r1, r1, ip
  21:main.c        ****     difference->tv_nsec = 1000000000+end.tv_nsec-start.tv_nsec;
 726              		.loc 1 21 0
 727 0600 02208040 		addmi	r2, r0, r2
 728              	.LBE19:
 729              	.LBE18:
 158:main.c        ****   
 159:main.c        ****   diff(&d, t1, t2);
 160:main.c        ****   printf("Execution Time: %ld sec, %ld nsec\n", d.tv_sec, d.tv_nsec);
 730              		.loc 1 160 0
 731 0604 000000E3 		movw	r0, #:lower16:.LC4
 732              	.LBB21:
 733              	.LBB20:
  21:main.c        ****     difference->tv_nsec = 1000000000+end.tv_nsec-start.tv_nsec;
 734              		.loc 1 21 0
 735 0608 02206340 		rsbmi	r2, r3, r2
  23:main.c        ****     difference->tv_sec = end.tv_sec-start.tv_sec;
 736              		.loc 1 23 0
 737 060c 0C106150 		rsbpl	r1, r1, ip
 738              	.LBE20:
 739              	.LBE21:
 740              		.loc 1 160 0
 741 0610 000040E3 		movt	r0, #:upper16:.LC4
 742 0614 FEFFFFEB 		bl	printf
 743              	.LVL42:
 161:main.c        ****   return 0;
 162:main.c        **** }
 744              		.loc 1 162 0
 745 0618 0000A0E3 		mov	r0, #0
 746 061c 44D08DE2 		add	sp, sp, #68
 747 0620 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 748              	.LVL43:
 749              	.L33:
 151:main.c        ****     fprintf(stderr, "Can't open output file %s!\n", outputFilename);
 750              		.loc 1 151 0
 751 0624 003000E3 		movw	r3, #:lower16:stderr
 752 0628 001000E3 		movw	r1, #:lower16:.LC2
 753 062c 003040E3 		movt	r3, #:upper16:stderr
 754 0630 002000E3 		movw	r2, #:lower16:.LC0
 755 0634 001040E3 		movt	r1, #:upper16:.LC2
 756 0638 002040E3 		movt	r2, #:upper16:.LC0
 757 063c 000093E5 		ldr	r0, [r3, #0]
 758              	.LVL44:
 759 0640 FEFFFFEB 		bl	fprintf
 152:main.c        ****     exit(1);
 760              		.loc 1 152 0
 761 0644 0100A0E3 		mov	r0, #1
 762 0648 FEFFFFEB 		bl	exit
 763              	.L35:
 764              		.align	2
 765              	.L34:
 766 064c 95BFD633 		.word	869711765
 767 0650 BE370635 		.word	889599934
 768 0654 6F12833A 		.word	981668463
 769 0658 00000000 		.word	0
 770 065c FCFFFFFF 		.word	y-4
 771 0660 FCFFFFFF 		.word	z-4
 772 0664 FCFFFFFF 		.word	x-4
 773 0668 FCFFFFFF 		.word	vx-4
 774              		.cfi_endproc
 775              	.LFE1891:
 777              		.comm	m,4000,16
 778              		.comm	x,4000,16
 779              		.comm	y,4000,16
 780              		.comm	z,4000,16
 781              		.comm	vx,4000,16
 782              		.comm	vy,4000,16
 783              		.comm	vz,4000,16
 784              		.comm	xnew,4000,16
 785              		.comm	ynew,4000,16
 786              		.comm	znew,4000,16
 787              		.section	.rodata.str1.4,"aMS",%progbits,1
 788              		.align	2
 789              	.LC0:
 790 0000 72657375 		.ascii	"results.txt\000"
 790      6C74732E 
 790      74787400 
 791              	.LC1:
 792 000c 7700     		.ascii	"w\000"
 793 000e 0000     		.space	2
 794              	.LC2:
 795 0010 43616E27 		.ascii	"Can't open output file %s!\012\000"
 795      74206F70 
 795      656E206F 
 795      75747075 
 795      74206669 
 796              	.LC3:
 797 002c 25662025 		.ascii	"%f %f %f\012\000"
 797      66202566 
 797      0A00
 798 0036 0000     		.space	2
 799              	.LC4:
 800 0038 45786563 		.ascii	"Execution Time: %ld sec, %ld nsec\012\000"
 800      7574696F 
 800      6E205469 
 800      6D653A20 
 800      256C6420 
 801 005b 00       		.text
 802              	.Letext0:
